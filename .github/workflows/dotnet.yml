name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env:
  TEST_DB_CONNECTION_STRING: Server=localhost;Port=5432;Database=slack_clone_test;Username=postgres;Password=postgres

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
  
    - name: Start PostgreSQL Docker container
      run: |
        docker run -d \
          -p 5432:5432 \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=slack_clone_test \
          --health-cmd pg_isready \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 3 \
          --name test-postgres \
          postgres:15

    - name: Wait for Postgres to be ready
      run: |
        timeout=10
        interval=1
        while ! docker exec -i "$(docker ps -q -f name=postgres)" pg_isready -U postgres; do
          sleep $interval
          timeout=$((timeout - interval))
          if [[ $timeout -le 0 ]]; then
            echo "Timeout: PostgreSQL failed to start."
            exit 1
          fi
        done
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
        
    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release
            
    - name: Perform Duende IdentityServer migrations
      run: cd src/IdentityService && ls && dotnet ef database update --context PersistedGrantDbContext && dotnet ef database update --context ConfigurationDbContext
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release --filter "Category=Order 1" && dotnet test --no-build --verbosity normal --configuration Release --filter "Category=Order 2"
      
    - name: Cleanup
      run: |
        docker stop test-postgres
        docker rm test-postgres
