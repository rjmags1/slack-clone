// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersistenceService.Data.ApplicationDb;

#nullable disable

namespace PersistenceService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersistenceService.Models.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("AllowThreads")
                        .HasColumnType("boolean");

                    b.Property<int>("AllowedChannelPostersMask")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("NumMembers")
                        .HasColumnType("integer");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Private");

                    b.HasIndex("WorkspaceId", "Name")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChannelInviteStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelInviteStatus");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("UserId", "WorkspaceId");

                    b.ToTable("ChannelInvites");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastViewedAt")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Starred")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ChannelId", "UserId")
                        .IsUnique();

                    b.ToTable("ChannelMembers");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Draft")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastEdit")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("Deleted");

                    b.HasIndex("Draft");

                    b.HasIndex("SentAt");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelMessages");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageLaterFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChannelLaterFlagStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ChannelMessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.HasIndex("ChannelMessageId", "UserId")
                        .IsUnique();

                    b.HasIndex("WorkspaceId", "UserId");

                    b.ToTable("ChannelMessageLaterFlags");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageMention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelMessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("MentionedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MentionerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelMessageId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("MentionerId");

                    b.HasIndex("MentionedId", "ChannelMessageId", "MentionerId")
                        .IsUnique();

                    b.ToTable("ChannelMessageMentions");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelMessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChannelMessageNotificationType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelMessageId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId", "ChannelMessageId")
                        .IsUnique();

                    b.ToTable("ChannelMessageNotifications");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelMessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("ChannelMessageId", "UserId");

                    b.ToTable("ChannelMessageReactions");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageRepliedToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RepliedToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReplierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelMessageId")
                        .IsUnique();

                    b.HasIndex("MessageRepliedToId");

                    b.HasIndex("RepliedToId");

                    b.HasIndex("ReplierId");

                    b.HasIndex("ThreadId");

                    b.ToTable("ChannelMessageReplies");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DirectMessageGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Draft")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastEdit")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("ReplyToId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Deleted");

                    b.HasIndex("DirectMessageGroupId");

                    b.HasIndex("Draft");

                    b.HasIndex("ReplyToId");

                    b.HasIndex("SentAt");

                    b.HasIndex("UserId");

                    b.ToTable("DirectMessages");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("DirectMessageGroups");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageGroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("DirectMessageGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastViewedGroupMessagesAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DirectMessageGroupId");

                    b.HasIndex("UserId", "DirectMessageGroupId")
                        .IsUnique();

                    b.ToTable("DirectMessageGroupMembers");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageLaterFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("DirectMessageGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DirectMessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("DirectMessageLaterFlagStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DirectMessageGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("DirectMessageId", "UserId")
                        .IsUnique();

                    b.HasIndex("WorkspaceId", "UserId");

                    b.ToTable("DirectMessageLaterFlags");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageMention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("DirectMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MentionedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MentionerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DirectMessageId");

                    b.HasIndex("MentionerId");

                    b.HasIndex("MentionedId", "DirectMessageId", "MentionerId")
                        .IsUnique();

                    b.ToTable("DirectMessageMentions");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("DirectMessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("DirectMessageNotificationType")
                        .HasColumnType("integer");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DirectMessageId");

                    b.HasIndex("UserId", "DirectMessageId")
                        .IsUnique();

                    b.ToTable("DirectMessageNotifications");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("DirectMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("DirectMessageId", "UserId");

                    b.ToTable("DirectMessageReactions");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("DirectMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageRepliedToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RepliedToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DirectMessageId")
                        .IsUnique();

                    b.HasIndex("MessageRepliedToId");

                    b.HasIndex("RepliedToId");

                    b.HasIndex("ReplierId");

                    b.ToTable("DirectMessageReplies");
                });

            modelBuilder.Entity("PersistenceService.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChannelMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DirectMessageGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DirectMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("StoreKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelMessageId");

                    b.HasIndex("DirectMessageGroupId");

                    b.HasIndex("DirectMessageId");

                    b.HasIndex("UploadedAt");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("PersistenceService.Models.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("PersistenceService.Models.Thread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("FirstMessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumMessages")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("FirstMessageId")
                        .IsUnique();

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("PersistenceService.Models.ThreadWatch", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ThreadId");

                    b.HasIndex("ThreadId");

                    b.ToTable("ThreadWatches");
                });

            modelBuilder.Entity("PersistenceService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("NotificationSound")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("NotificationsAllowEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("NotificationsAllowStartTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("NotificationsPauseUntil")
                        .HasColumnType("time without time zone");

                    b.Property<string>("OnlineStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("OnlineStatusUntil")
                        .HasColumnType("timestamp");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<Guid?>("ThemeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("UserNotificationsPreferencesMask")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("Deleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ThemeId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PersistenceService.Models.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<int>("NumMembers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceAdminPermissions", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("WorkspaceAdminPermissionsMask")
                        .HasColumnType("integer");

                    b.HasKey("AdminId", "WorkspaceId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceAdminPermissions");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkspaceInviteStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("WorkspaceInviteStatus");

                    b.ToTable("WorkspaceInvites");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("NotificationSound")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("NotificationsAllTimeEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("NotificationsAllowTimeStart")
                        .HasColumnType("time without time zone");

                    b.Property<string>("OnlineStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("OnlineStatusUntil")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Owner")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ThemeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("JoinedAt");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId", "WorkspaceId")
                        .IsUnique();

                    b.HasIndex("WorkspaceId", "UserId");

                    b.ToTable("WorkspaceMembers");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceSearch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkspaceId", "UserId");

                    b.ToTable("WorkspaceSearches");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PersistenceService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PersistenceService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PersistenceService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersistenceService.Models.Channel", b =>
                {
                    b.HasOne("PersistenceService.Models.File", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersistenceService.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("CreatedBy");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelInvite", b =>
                {
                    b.HasOne("PersistenceService.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Channel");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMember", b =>
                {
                    b.HasOne("PersistenceService.Models.Channel", "Channel")
                        .WithMany("ChannelMembers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessage", b =>
                {
                    b.HasOne("PersistenceService.Models.Channel", "Channel")
                        .WithMany("ChannelMessages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Thread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageLaterFlag", b =>
                {
                    b.HasOne("PersistenceService.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.ChannelMessage", "ChannelMessage")
                        .WithMany()
                        .HasForeignKey("ChannelMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("ChannelMessage");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageMention", b =>
                {
                    b.HasOne("PersistenceService.Models.ChannelMessage", "ChannelMessage")
                        .WithMany("Mentions")
                        .HasForeignKey("ChannelMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "Mentioned")
                        .WithMany()
                        .HasForeignKey("MentionedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "Mentioner")
                        .WithMany()
                        .HasForeignKey("MentionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelMessage");

                    b.Navigation("Mentioned");

                    b.Navigation("Mentioner");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageNotification", b =>
                {
                    b.HasOne("PersistenceService.Models.ChannelMessage", "ChannelMessage")
                        .WithMany()
                        .HasForeignKey("ChannelMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageReaction", b =>
                {
                    b.HasOne("PersistenceService.Models.ChannelMessage", "ChannelMessage")
                        .WithMany("Reactions")
                        .HasForeignKey("ChannelMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessageReply", b =>
                {
                    b.HasOne("PersistenceService.Models.ChannelMessage", "ChannelMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ChannelMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.ChannelMessage", "MessageRepliedTo")
                        .WithMany()
                        .HasForeignKey("MessageRepliedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "RepliedTo")
                        .WithMany()
                        .HasForeignKey("RepliedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "Replier")
                        .WithMany()
                        .HasForeignKey("ReplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Thread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelMessage");

                    b.Navigation("MessageRepliedTo");

                    b.Navigation("RepliedTo");

                    b.Navigation("Replier");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessage", b =>
                {
                    b.HasOne("PersistenceService.Models.DirectMessageGroup", "DirectMessageGroup")
                        .WithMany("DirectMessages")
                        .HasForeignKey("DirectMessageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.DirectMessage", "ReplyTo")
                        .WithMany()
                        .HasForeignKey("ReplyToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessageGroup");

                    b.Navigation("ReplyTo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageGroup", b =>
                {
                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageGroupMember", b =>
                {
                    b.HasOne("PersistenceService.Models.DirectMessageGroup", "DirectMessageGroup")
                        .WithMany("DirectMessageGroupMembers")
                        .HasForeignKey("DirectMessageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessageGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageLaterFlag", b =>
                {
                    b.HasOne("PersistenceService.Models.DirectMessageGroup", "DirectMessageGroup")
                        .WithMany()
                        .HasForeignKey("DirectMessageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.DirectMessage", "DirectMessage")
                        .WithMany()
                        .HasForeignKey("DirectMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessage");

                    b.Navigation("DirectMessageGroup");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageMention", b =>
                {
                    b.HasOne("PersistenceService.Models.DirectMessage", "DirectMessage")
                        .WithMany("Mentions")
                        .HasForeignKey("DirectMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "Mentioned")
                        .WithMany()
                        .HasForeignKey("MentionedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "Mentioner")
                        .WithMany()
                        .HasForeignKey("MentionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessage");

                    b.Navigation("Mentioned");

                    b.Navigation("Mentioner");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageNotification", b =>
                {
                    b.HasOne("PersistenceService.Models.DirectMessage", "DirectMessage")
                        .WithMany()
                        .HasForeignKey("DirectMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageReaction", b =>
                {
                    b.HasOne("PersistenceService.Models.DirectMessage", "DirectMessage")
                        .WithMany("Reactions")
                        .HasForeignKey("DirectMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageReply", b =>
                {
                    b.HasOne("PersistenceService.Models.DirectMessage", "DirectMessage")
                        .WithMany("Replies")
                        .HasForeignKey("DirectMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.DirectMessage", "MessageRepliedTo")
                        .WithMany()
                        .HasForeignKey("MessageRepliedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "RepliedTo")
                        .WithMany()
                        .HasForeignKey("RepliedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "Replier")
                        .WithMany()
                        .HasForeignKey("ReplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessage");

                    b.Navigation("MessageRepliedTo");

                    b.Navigation("RepliedTo");

                    b.Navigation("Replier");
                });

            modelBuilder.Entity("PersistenceService.Models.File", b =>
                {
                    b.HasOne("PersistenceService.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersistenceService.Models.ChannelMessage", "ChannelMessage")
                        .WithMany("Files")
                        .HasForeignKey("ChannelMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersistenceService.Models.DirectMessageGroup", "DirectMessageGroup")
                        .WithMany("Files")
                        .HasForeignKey("DirectMessageGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersistenceService.Models.DirectMessage", "DirectMessage")
                        .WithMany("Files")
                        .HasForeignKey("DirectMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Channel");

                    b.Navigation("ChannelMessage");

                    b.Navigation("DirectMessage");

                    b.Navigation("DirectMessageGroup");
                });

            modelBuilder.Entity("PersistenceService.Models.Thread", b =>
                {
                    b.HasOne("PersistenceService.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.ChannelMessage", "FirstMessage")
                        .WithMany()
                        .HasForeignKey("FirstMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("FirstMessage");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.ThreadWatch", b =>
                {
                    b.HasOne("PersistenceService.Models.Thread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersistenceService.Models.User", b =>
                {
                    b.HasOne("PersistenceService.Models.File", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersistenceService.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Avatar");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("PersistenceService.Models.Workspace", b =>
                {
                    b.HasOne("PersistenceService.Models.File", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceAdminPermissions", b =>
                {
                    b.HasOne("PersistenceService.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceInvite", b =>
                {
                    b.HasOne("PersistenceService.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceMember", b =>
                {
                    b.HasOne("PersistenceService.Models.File", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersistenceService.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Theme");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.WorkspaceSearch", b =>
                {
                    b.HasOne("PersistenceService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceService.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PersistenceService.Models.Channel", b =>
                {
                    b.Navigation("ChannelMembers");

                    b.Navigation("ChannelMessages");
                });

            modelBuilder.Entity("PersistenceService.Models.ChannelMessage", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Mentions");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessage", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Mentions");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("PersistenceService.Models.DirectMessageGroup", b =>
                {
                    b.Navigation("DirectMessageGroupMembers");

                    b.Navigation("DirectMessages");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("PersistenceService.Models.Thread", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
